; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.8.3"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.25.8"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉pegthing.core꞉> 
; Jack-in done.
clj꞉pegthing.core꞉> 
(source tri*)
; Syntax error compiling at (output.calva-repl:21:1).
; Unable to resolve symbol: source in this context
clj꞉pegthing.core꞉> 
(src tri*)
; Syntax error compiling at (output.calva-repl:25:1).
; Unable to resolve symbol: src in this context
clj꞉pegthing.core꞉> 
(source -main)
; Syntax error compiling at (output.calva-repl:29:1).
; Unable to resolve symbol: source in this context
clj꞉pegthing.core꞉> 
(doc source)
; Syntax error compiling at (output.calva-repl:33:1).
; Unable to resolve symbol: doc in this context
clj꞉pegthing.core꞉> 
(use clojure.repl)
; Syntax error (ClassNotFoundException) compiling at (output.calva-repl:37:1).
; clojure.repl
clj꞉pegthing.core꞉> 
(use 'clojure.repl)
nil
clj꞉pegthing.core꞉> 
(doc source)
-------------------------
clojure.repl/source
([n])
Macro
  Prints the source code for the given symbol, if it can find it.
  This requires that the symbol resolve to a Var defined in a
  namespace for which the .clj is in the classpath.

  Example: (source filter)
nil
clj꞉pegthing.core꞉> 
(doc -main)
-------------------------
pegthing.core/-main
([])
  Launch a new game
nil
clj꞉pegthing.core꞉> 
(doc tri*)
-------------------------
pegthing.core/tri*
([] [sum n])
  Generates lazy sequence of triangular numbers
   1 (1)
   3 (1 + 2)
   6 (1 + 2 + 3)
   ...
nil
clj꞉pegthing.core꞉> 
(doc -main)
-------------------------
pegthing.core/-main
([])
  Launch a new game
nil
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/tri
clj꞉pegthing.core꞉> 
(take 2 tri)
(1 3)
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/triangular?
clj꞉pegthing.core꞉> 
(triangular? 2)
false
clj꞉pegthing.core꞉> 
(triangular? 3)
true
clj꞉pegthing.core꞉> 
(triangular? -3)
false
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-tri
clj꞉pegthing.core꞉> 
(row-tri 2)
3
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-tri
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-tri
clj꞉pegthing.core꞉> 
(row-tri 2)
6
clj꞉pegthing.core꞉> 
(row-tri 1)
3
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-tri
clj꞉pegthing.core꞉> 
(row-tri 1)
1
clj꞉pegthing.core꞉> 
(row-tri 2)
3
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-tri
clj꞉pegthing.core꞉> 
(row-tri 2)
3
clj꞉pegthing.core꞉> 
(row-tri 1)
1
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/row-num
clj꞉pegthing.core꞉> 
(row-num 2)
2
clj꞉pegthing.core꞉> 
(row-num 3)
2
clj꞉pegthing.core꞉> 
(row-num 4)
3
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/connect
clj꞉pegthing.core꞉> 
(connect {} 15 1 2 4)
{1 {:connections {4 2}}, 4 {:connections {1 2}}}
clj꞉pegthing.core꞉> 
(connect {} 1 1 2 4)
{}
clj꞉pegthing.core꞉> 
; Evaluating file: core.clj
#'pegthing.core/connect-right
clj꞉pegthing.core꞉> 
(connect-right {} 15 1)
{}
clj꞉pegthing.core꞉> 
(connect-right {} 15 2)
{}
clj꞉pegthing.core꞉> 
(connect-right {} 15 3)
{}
clj꞉pegthing.core꞉> 
(connect-right {} 15 4)
{4 {:connections {6 5}}, 6 {:connections {4 5}}}
clj꞉pegthing.core꞉> 
(connect-right {} 15 5)
{}
clj꞉pegthing.core꞉> 
(connect-right {} 15 6)
{}
clj꞉pegthing.core꞉> 
(connect-right {} 15 7)
{7 {:connections {9 8}}, 9 {:connections {7 8}}}
clj꞉pegthing.core꞉> 
(connect-right {} 15 8)
{8 {:connections {10 9}}, 10 {:connections {8 9}}}
clj꞉pegthing.core꞉> 
